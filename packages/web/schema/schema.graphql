"""Query"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  currentUser: User
  podcast(_id: ID): Podcast
  podcasts(after: String, first: Int, before: String, last: Int): PodcastConnection!
  searchPodcastsByName(after: String, first: Int, before: String, last: Int, name: String): PodcastConnection
  searchPodcastsByPrimaryGenre(after: String, first: Int, before: String, last: Int, primaryGenre: String): PodcastConnection!
  episodes(after: String, first: Int, before: String, last: Int, podcastID: ID): EpisodeConnection
  episode(_id: ID): Episode
  userSubscribedToPodcast(_id: ID): Boolean!
  userFavoritedEpisode(_id: ID): Boolean!
  searchPodcastEpisodes(after: String, first: Int, before: String, last: Int, podcastID: ID, episodeName: String): EpisodeConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""UserType"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: String!
  email: String
  subscriptions(after: String, first: Int, before: String, last: Int): PodcastConnection
  favorites(after: String, first: Int, before: String, last: Int): EpisodeFavoriteAndHistoryConnection
  history(after: String, first: Int, before: String, last: Int): EpisodeFavoriteAndHistoryConnection
  subscribed(input: UserSubscribedInput): Boolean
  favorited(input: UserFavoritedInput): Boolean
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type PodcastConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [PodcastEdge]!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PodcastEdge {
  """The item at the end of the edge"""
  node: Podcast

  """A cursor for use in pagination"""
  cursor: String!
}

"""PodcastType"""
type Podcast implements Node {
  """The ID of an object"""
  id: ID!
  _id: String!
  appleId: Int
  name: String
  author: String
  description: String
  website: String
  rss: String
  image: String
  episodes(after: String, first: Int, before: String, last: Int): EpisodeConnection
  country: String
  primaryGenre: String
  genres: [String]
  genreIds: [String]
}

"""A connection to a list of items."""
type EpisodeConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [EpisodeEdge]!
}

"""An edge in a connection."""
type EpisodeEdge {
  """The item at the end of the edge"""
  node: Episode

  """A cursor for use in pagination"""
  cursor: String!
}

"""EpisodeType"""
type Episode implements Node {
  """The ID of an object"""
  id: ID!
  _id: String!
  title: String
  description: String
  publishedDate: String
  link: String
  image: String
  audio: String
  guid: String
  duration: String
  generator: String
  owner: Owner
  podcast: Podcast
}

"""OwnerType"""
type Owner {
  name: String
  email: String
}

"""A connection to a list of items."""
type EpisodeFavoriteAndHistoryConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [EpisodeFavoriteAndHistoryEdge]!
}

"""An edge in a connection."""
type EpisodeFavoriteAndHistoryEdge {
  """The item at the end of the edge"""
  node: EpisodeFavoriteAndHistoryType

  """A cursor for use in pagination"""
  cursor: String!
}

"""User history"""
type EpisodeFavoriteAndHistoryType {
  episode: Episode!
  date: String!
}

"""Input payload for checking if user is subscribed to podcast"""
input UserSubscribedInput {
  _id: String
}

"""Input payload for checking if user has favorited an episode"""
input UserFavoritedInput {
  _id: String
}

type Mutation {
  UserSignInWithEmail(input: UserSignInWithEmailInput!): UserSignInWithEmailPayload
  UserSignUpWithEmail(input: UserSignUpWithEmailInput!): UserSignUpWithEmailPayload
  UserChangePassword(input: UserChangePasswordInput!): UserChangePasswordPayload
  UserSendResetPasswordLink(input: UserSendResetPasswordLinkInput!): UserSendResetPasswordLinkPayload
  UserSubscribePodcast(input: UserSubscribePodcastInput!): UserSubscribePodcastPayload
  UserUnsubscribePodcast(input: UserUnsubscribePodcastInput!): UserUnsubscribePodcastPayload
  UserAddFavoriteEpisode(input: UserAddFavoriteEpisodeInput!): UserAddFavoriteEpisodePayload
  UserRemoveFavoriteEpisode(input: UserRemoveFavoriteEpisodeInput!): UserRemoveFavoriteEpisodePayload
  UserCleanFavorites(input: UserCleanFavoritesInput!): UserCleanFavoritesPayload
  UserAddHistory(input: UserAddHistoryInput!): UserAddHistoryPayload
  UserRemoveHistory(input: UserRemoveHistoryInput!): UserRemoveHistoryPayload
  UserCleanHistory(input: UserCleanHistoryInput!): UserCleanHistoryPayload
}

type UserSignInWithEmailPayload {
  currentUser: User
  token: String
  error: String
  success: String
  clientMutationId: String
}

input UserSignInWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserSignUpWithEmailPayload {
  currentUser: User
  token: String
  error: String
  success: String
  clientMutationId: String
}

input UserSignUpWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserChangePasswordPayload {
  currentUser: User
  error: String
  success: String
  clientMutationId: String
}

input UserChangePasswordInput {
  oldPassword: String!
  newPassword: String!
  clientMutationId: String
}

type UserSendResetPasswordLinkPayload {
  error: String
  success: String
  clientMutationId: String
}

input UserSendResetPasswordLinkInput {
  email: String!
  clientMutationId: String
}

type UserSubscribePodcastPayload {
  currentUser: User
  error: String
  success: String
  clientMutationId: String
}

input UserSubscribePodcastInput {
  _id: String!
  clientMutationId: String
}

type UserUnsubscribePodcastPayload {
  currentUser: User
  error: String
  success: String
  clientMutationId: String
}

input UserUnsubscribePodcastInput {
  _id: String!
  clientMutationId: String
}

type UserAddFavoriteEpisodePayload {
  currentUser: User
  error: String
  success: String
  clientMutationId: String
}

input UserAddFavoriteEpisodeInput {
  _id: String!
  clientMutationId: String
}

type UserRemoveFavoriteEpisodePayload {
  currentUser: User
  error: String
  success: String
  clientMutationId: String
}

input UserRemoveFavoriteEpisodeInput {
  _id: String!
  clientMutationId: String
}

type UserCleanFavoritesPayload {
  currentUser: User
  error: String
  success: String
  clientMutationId: String
}

input UserCleanFavoritesInput {
  clientMutationId: String
}

type UserAddHistoryPayload {
  currentUser: User
  error: String
  success: String
  clientMutationId: String
}

input UserAddHistoryInput {
  _id: String!
  clientMutationId: String
}

type UserRemoveHistoryPayload {
  currentUser: User
  error: String
  success: String
  clientMutationId: String
}

input UserRemoveHistoryInput {
  _id: String!
  clientMutationId: String
}

type UserCleanHistoryPayload {
  currentUser: User
  error: String
  success: String
  clientMutationId: String
}

input UserCleanHistoryInput {
  clientMutationId: String
}
